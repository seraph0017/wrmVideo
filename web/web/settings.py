"""
Django settings for web project.

Generated by 'django-admin startproject' using Django 4.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

# Load environment variables from .env file
try:
    from dotenv import load_dotenv
    # 加载项目根目录的.env文件
    env_path = Path(__file__).resolve().parent.parent.parent / '.env'
    load_dotenv(env_path)
except ImportError:
    # python-dotenv not installed, skip loading .env file
    pass

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-xikrneoyinmr0qr9*q5jc+=e%pt=7i(s-sh=-5ch$=9p_iuzx8'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'video',
    'django_bootstrap5',
    # Redis和异步任务
    'django_celery_beat',
    'django_celery_results',
    # WebSocket支持
    'channels',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'web.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'web.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        "NAME": "wrm_video",
        "USER": "root",
        "PASSWORD": "1q2w3e4r",
        "HOST": "127.0.0.1",
        "PORT": "3306",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
    # 添加data目录以支持角色图片访问
    BASE_DIR.parent / "data",
]
STATIC_ROOT = BASE_DIR / "staticfiles"

# Media files (User uploaded files)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024   # 10MB

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# TOS配置
TOS_CONFIG = {
    'access_key': os.environ.get('TOS_ACCESS_KEY', ''),
    'secret_key': os.environ.get('TOS_SECRET_KEY', ''),
    'endpoint': 'tos-cn-beijing.volces.com',
    'region': 'cn-beijing',
    'bucket': 'rm-tos-002'
}

# 火山引擎配置 - 从环境变量读取原始密钥（无需解码）
VOLCENGINE_ACCESS_KEY = os.environ.get('VOLCENGINE_ACCESS_KEY', '')
VOLCENGINE_SECRET_KEY = os.environ.get('VOLCENGINE_SECRET_KEY', '')

# Redis配置
REDIS_HOST = 'localhost'
REDIS_PORT = 6379
REDIS_DB = 0
REDIS_URL = f'redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}'

# Celery配置
CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = REDIS_URL
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = True

# Celery任务路由
CELERY_TASK_ROUTES = {
    'video.tasks.*': {'queue': 'celery'},
}

# Celery任务注解配置 - 启用rate_limit功能
CELERY_TASK_ANNOTATIONS = {
    '*': {
        'rate_limit': None,  # 默认无限制
    },
    'video.tasks.generate_narration_images_async': {
        'rate_limit': '2/s',  # 每秒最多2个任务
    },
}

# Celery日志配置
CELERY_WORKER_LOG_FORMAT = '[%(asctime)s: %(levelname)s/%(processName)s] %(message)s'
CELERY_WORKER_TASK_LOG_FORMAT = '[%(asctime)s: %(levelname)s/%(processName)s][%(task_name)s(%(task_id)s)] %(message)s'
CELERY_WORKER_LOGFILE = str(BASE_DIR / 'logs' / 'celery.log')
CELERY_WORKER_LOGLEVEL = 'INFO'

# Celery Beat定时任务配置
from celery.schedules import crontab

CELERY_BEAT_SCHEDULE = {
    # 每15秒扫描一次data目录
    'scan-all-async-tasks': {
        'task': 'video.tasks.scan_and_process_async_tasks',
        'schedule': 15.0,  # 每15秒执行一次
        'args': ('data',),  # 数据目录参数
        'options': {
            'queue': 'celery',
            'routing_key': 'celery',
        }
    },
    # 每15秒扫描一次async_tasks目录
    'scan-specific-async-tasks': {
        'task': 'video.tasks.scan_specific_async_tasks',
        'schedule': 15.0,  # 每15秒执行一次
        'args': ('async_tasks',),  # 任务目录参数
        'options': {
            'queue': 'celery',
            'routing_key': 'celery',
        }
    },
    # 每30秒扫描一次数据库中的Celery任务状态
    'scan-database-celery-tasks': {
        'task': 'video.tasks.scan_database_celery_tasks',
        'schedule': 30.0,  # 每30秒执行一次
        'options': {
            'queue': 'celery',
            'routing_key': 'celery',
        }
    },
}

# Celery Beat调度器配置
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_BEAT_MAX_LOOP_INTERVAL = 60  # 最大循环间隔（秒）

# 日志配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'celery': {
            'format': '[{asctime}] {levelname} {name}: {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'celery',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'celery.log',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'celery': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'video.tasks': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'video.views': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# Django Channels配置
ASGI_APPLICATION = 'web.asgi.application'
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [(REDIS_HOST, REDIS_PORT)],
        },
    },
}

# 登录相关配置
LOGIN_URL = '/video/login/'
LOGIN_REDIRECT_URL = '/video/dashboard/'
LOGOUT_REDIRECT_URL = '/video/login/'
